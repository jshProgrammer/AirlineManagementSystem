scalar Long
scalar Void

type APIAddress {
    street: String!,
    number: Int!,
    zipCode: Int!,
    city: String!
    country: String!
}

type APIAirline {
    name: String!,
    foundationYear: String,
    address: APIAddress!,
    phoneNumber: String!,
    email: String!
}

type APIAirplane{
    serialNum: Int!,
    belongingAirlineName: String!,
    isOperable: Boolean!
}

type APIAirport{
    code: String!,
    name: String!,
    country: String!,
    city: String!,
    timezone: String!
}

type APIClient{
    clientId: Long!,
    firstName: String!,
    middleNames: String,
    lastName: String!,
    dateOfBirth: String!,
    phoneNumber: String!,
    address: APIAddress!,
    email: String!,
    isBusinessClient: Boolean!
}

type APIEmployee{
    employeeId: Long!,
    firstName: String!,
    middleNames: String,
    lastName: String!,
    dateOfBirth: String!,
    phoneNumber: String!,
    address: APIAddress!,
    email: String!,
    airlineName: String!
}
enum APIFlightStatus {
    scheduled, in_the_air, landed, delayed, canceled
}

type APIFlight{
    flightNum: Long!,
    airplaneSerialNum: Int!,
    departureDateTime: String!,
    departureAirportCode: String!,
    arrivalDateTime: String!,
    arrivalAirportCode: String!,
    boardingTime: String!,
    status: APIFlightStatus!,
    duration: Int!,
    pilotId: Long!,
    copilotId: Long!
}

enum APISeatingClass {
    Economy, Business, First
}

enum APITicketStatus {
    paid, unpaid, canceled
}

type APITicket{
    ticketId: Long!,
    personId: Long!,
    isClient: Boolean!,
    flightNum: Long!,
    dateTimeOfBooking: String!,
    totalPrice: Int!,
    seatNum: Int!,
    seatingClass: APISeatingClass!,
    ticketStatus: APITicketStatus!,
    weightOfLuggage: Int!
}

input APIAddressInput {
    street: String!,
    number: Int!,
    zipCode: Int!,
    city: String!
    country: String!
}

input APIAirlineInput {
    name: String!,
    foundationYear: String,
    address: APIAddressInput!,
    phoneNumber: String!,
    email: String!
}

input APIAirplaneInput{
    serialNum: Int!,
    belongingAirlineName: String!,
    isOperable: Boolean!
}

input APIAirportInput{
    code: String!,
    name: String!,
    country: String!,
    city: String!,
    timezone: String!
}

input APIClientInput{
    firstName: String!,
    middleNames: String,
    lastName: String!,
    dateOfBirth: String!,
    phoneNumber: String!,
    address: APIAddressInput!,
    email: String!,
    isBusinessClient: Boolean!
}

input APIEmployeeInput{
    firstName: String!,
    middleNames: String,
    lastName: String!,
    dateOfBirth: String!,
    phoneNumber: String!,
    address: APIAddressInput!,
    email: String!,
    airlineName: String!
}
enum APIFlightStatusInput {
    scheduled, in_the_air, landed, delayed, canceled
}

input APIFlightInput{
    airplaneSerialNum: Int!,
    departureDateTime: String!,
    departureAirportCode: String!,
    arrivalDateTime: String!,
    arrivalAirportCode: String!,
    boardingTime: String!,
    status: APIFlightStatusInput!,
    duration: Int!,
    pilotId: Long!,
    copilotId: Long!
}

enum APISeatingClassInput {
    Economy, Business, First
}

enum APITicketStatusInput {
    paid, unpaid, canceled
}

input APITicketInput{
    personId: Long!,
    isClient: Boolean!,
    flightNum: Long!,
    dateTimeOfBooking: String!,
    totalPrice: Int!,
    seatNum: Int!,
    seatingClass: APISeatingClassInput!,
    ticketStatus: APITicketStatusInput!,
    weightOfLuggage: Int!
}

input APIPaymentInput {
    cardNumber: String!,
    expMonth: String!,
    expYear: String!,
    cvc: String!
}


type Query {
    #verifyPassword(employee: APIEmployeeInput, password: String): Boolean

    readEmployeeById(employeeId: Long): APIEmployee
    readClientById(clientId: Long): APIClient

    readTicketById(ticketId: Long): APITicket

    readAirportByCode(code: String): APIAirport

    readFlightByFlightNum(flightNum: Long): APIFlight
    getAllFlights(pageNumber: Int, pageSize: Int): [APIFlight]

    readAirlineByName(name: String): APIAirline

    readAirplaneBySerialNum(serialNum: Int): APIAirplane
}

type Mutation {
    createFlight(flight: APIFlightInput): APIFlight
    updateFlight(flightNum: Long, flight: APIFlightInput): Void
    cancelFlight(flightNum: Long): Void

    createEmployee(employee: APIEmployeeInput): APIEmployee
    updateEmployee(employeeId: Float, employee: APIEmployeeInput): Void

    createClient(client: APIClientInput): APIClient
    updateClient(clientId: Long, client: APIClientInput): Void

    addBooking(newBooking: APITicketInput, payment: APIPaymentInput): APITicket
    upgradeSeatingClass(ticketId: Long, newSeatingClass: APISeatingClassInput): Void
    upgradeLuggageWeight(ticketId: Long, newLuggageWeight: Int): Void

    cancelTicketEmployee(employeeId: Long, flightNum: Long): Void
    cancelTicketClient(clientId: Long, flightNum: Long): Void

    createAirport(airport: APIAirportInput): Void

    createAirline(airline: APIAirlineInput): Void
    updateAirline(airline: APIAirlineInput): Void

    createAirplane(airplane: APIAirplaneInput): Void
    setOperable(serialNum: Long, isOperable: Boolean): Void
}