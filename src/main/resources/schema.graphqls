scalar Date
scalar Long
scalar Void

type MyType {
    created: Date
}

type APIAddress {
    street: String!,
    number: Int!,
    zipCode: Int!,
    city: String!
    country: String!
}

type APIAirline {
    name: String!,
    foundationYear: String,
    address: APIAddress!,
    phoneNumber: String!,
    email: String!
}

type APIAirplane{
    serialNum: Int!,
    belongingAirlineName: String!,
    isOperable: Boolean!
}

type APIAirport{
    code: String!,
    name: String!,
    country: String!,
    city: String!,
    timezone: String!
}

type APIClient{
    clientId: Long!,
    firstName: String!,
    middleNames: String,
    lastName: String!,
    dateOfBirth: String!,
    phoneNumber: String!,
    address: APIAddress!,
    email: String!,
    isBusinessClient: Boolean!
}

type APIEmployee{
    employeeId: Long!,
    firstName: String!,
    middleNames: String,
    lastName: String!,
    dateOfBirth: String!,
    phoneNumber: String!,
    address: APIAddress!,
    email: String!,
    airlineName: String!
}
enum APIFlightStatus {
    scheduled, in_the_air, landed, delayed, canceled
}

type APIFlight{
    flightNum: Long!,
    airplaneSerialNum: Int!,
    departureDateTime: Date!,
    departureAirportCode: String!,
    arrivalDateTime: Date!,
    arrivalAirportCode: String!,
    boardingTime: Date!,
    status: APIFlightStatus!,
    duration: Int!,
    pilotId: Long!,
    copilotId: Long!
}

enum APISeatingClass {
    Economy, Business, First
}

enum APITicketStatus {
    paid, unpaid, canceled
}

type APITicket{
    ticketID: Int!,
    personID: Long!,
    isCLient: Boolean!,
    flightNum: Long!,
    dateTimeOfBooking: Date!,
    totalPrice: Int!,
    seatNum: Int!,
    seatingClass: APISeatingClass!,
    ticketStatus: APITicketStatus!,
    weightOfLuggage: Int!
}

input APIAddressInput {
    street: String!,
    number: Int!,
    zipCode: Int!,
    city: String!
    country: String!
}

input APIAirlineInput {
    name: String!,
    foundationYear: String,
    address: APIAddressInput!,
    phoneNumber: String!,
    email: String!
}

input APIAirplaneInput{
    serialNum: Int!,
    belongingAirlineName: String!,
    isOperable: Boolean!
}

input APIAirportInput{
    code: String!,
    name: String!,
    country: String!,
    city: String!,
    timezone: String!
}

input APIClientInput{
    firstName: String!,
    middleNames: String,
    lastName: String!,
    dateOfBirth: String!,
    phoneNumber: String!,
    address: APIAddressInput!,
    email: String!,
    isBusinessClient: Boolean!
}

input APIEmployeeInput{
    firstName: String!,
    middleNames: String,
    lastName: String!,
    dateOfBirth: String!,
    phoneNumber: String!,
    address: APIAddressInput!,
    email: String!,
    airlineName: String!
}
enum APIFlightStatusInput {
    scheduled, in_the_air, landed, delayed, canceled
}

input APIFlightInput{
    flightNum: Long!,
    airplaneSerialNum: Int!,
    departureDateTime: Date!,
    departureAirportCode: String!,
    arrivalDateTime: Date!,
    arrivalAirportCode: String!,
    boardingTime: Date!,
    status: APIFlightStatus!,
    duration: Int!,
    pilotId: Long!,
    copilotId: Long!
}

enum APISeatingClassInput {
    Economy, Business, First
}

enum APITicketStatusInput {
    paid, unpaid, canceled
}

input APITicketInput{
    ticketID: Int!,
    personID: Long!,
    isClient: Boolean!,
    flightNum: Long!,
    dateTimeOfBooking: Date!,
    totalPrice: Int!,
    seatNum: Int!,
    seatingClass: APISeatingClass!,
    ticketStatus: APITicketStatus!,
    weightOfLuggage: Int!
}

input APIPaymentInput {
    cardNumber: String!,
    expMont: String!,
    expYear: String!,
    cvv: Int!
}

#TODO: nochmal prüfen => eig haben InputModels wohl keine id

type Query {
    #verifyPassword(employee: APIEmployeeInput, password: String): Boolean

    readEmployeeById(employeeId: Long): APIEmployee
    readClientById(clientId: Long): APIClient

    #TODO: readTicketById funktioniert noch nicht => WARUM?!
    #readTicketById(ticketId: Int): APITicket

    readAirportByCode(code: String): APIAirport

    ##readFlightByFlightNum(flightNum: Int): APIFlight
    readAirlineByName(name: String): APIAirline

    readAirplaneBySerialNum(serialNum: Int): APIAirplane
}

type Mutation {
    #TODO: überall noch wegen enums Probleme
    #createFlight(flight: APIFlightInput): Void
    #updateFlight(flight: APIFlightInput): Void
    #TODO: Parameter geändert => nur noch int -> prüfen, ob an allen Stellen geändert -> existiert noch garnicht?
    #cancelFlight(flightNum: Int): Void

    #TODO: die folgenden vier Methoden funktionieren noch nicht
    createEmployee(employee: APIEmployeeInput): APIEmployee
    updateEmployee(employeeId: Float, employee: APIEmployeeInput): Void

    createClient(client: APIClientInput): APIClient
    updateClient(clientId: Long, client: APIClientInput): Void

    #TODO addBooking und upgradeSeatingClass funktionieren noch nicht!
    #addBooking(newBooking: APITicketInput, payment: APIPaymentInput): Void
    #upgradeSeatingClass(ticketId: Int, newSeatingClass: APISeatingClassInput): Void
    ##upgradeLuggageWeight(ticketId: Int, newLuggageWeight: Int): Void

    #TODO: hier noch klären, ob nicht wirklich nur id ausreichend ist
    ##cancelTicketEmployee(employeeId: Int, flightNum: Int): Void
    ##cancelTicketClient(clientId: Int, flightNum: Int): Void

    createAirport(airport: APIAirportInput): Void

    createAirline(airline: APIAirlineInput): Void
    updateAirline(airline: APIAirlineInput): Void

     createAirplane(airplane: APIAirplaneInput): Void
    ##setOperable(serialNum: Int, isOperable: Boolean): Void
}